<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>module-sceneserver</artifactId>
    <packaging>jar</packaging>
    <version>1.0.0-SNAPSHOT</version>
    <name>sceneserver</name>

    <parent>
        <groupId>de.yard.tcp-22</groupId>
        <artifactId>main</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <properties>
        <!-- A build output outside target to have a better separation from target. But that doesn't clean it,
        potentially leading to nasty dependency issues with old files. So put it to target-->
        <libdir>${project.build.directory}/buildlib</libdir>
        <!-- gwt has its own jetty version? -->
        <!-- wiremock also uses jetty, but needs at least 9.4.16 with SslContextFactory splitted into Client and Server) -->
        <jettyexceptgwt.version>9.4.19.v20190610</jettyexceptgwt.version>
    </properties>
    <dependencies>
        <!-- junit, wiremock comes from parent -->
        <!-- No limitation here in using any lib; no need for GWT or C# conversion. -->
        <!-- gson comes via java-native
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.2</version>
        </dependency>-->
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.20</version>
            <!-- provided because its not needed during runtime-->
            <scope>provided</scope>
        </dependency>
        <!-- embedded jetty for websockets (wiremock also uses jetty, but needs at least 9.4.16 with SslContextFactory splitted into Client and Server) -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jettyexceptgwt.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlet</artifactId>
            <version>${jettyexceptgwt.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty.websocket</groupId>
            <artifactId>javax-websocket-server-impl</artifactId>
            <version>${jettyexceptgwt.version}</version>
        </dependency>
        <!-- Needed for the SSLContextFactory$Client class, which seems to be needed by wiremock -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-util</artifactId>
            <version>${jettyexceptgwt.version}</version>
        </dependency>
        <!-- client for testing. But not a jetty client to avoid false positives due
          to the same implementation base. And for compatibility.-->
        <dependency>
            <groupId>org.asynchttpclient</groupId>
            <artifactId>async-http-client</artifactId>
            <version>2.12.3</version>
            <scope>test</scope>
        </dependency>
        <!-- httpclient cannot use websockets -->
        <!-- client5 httpclient is available in principle also via java-common in platform-homebrew, but make sure we have it though with expected version-->
        <dependency>
            <groupId>org.apache.httpcomponents.client5</groupId>
            <artifactId>httpclient5</artifactId>
            <version>${hc.client5.version}</version>
        </dependency>
        <!-- own project dependencies-->
        <dependency>
            <groupId>de.yard.tcp-22</groupId>
            <artifactId>module-core</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>de.yard.tcp-22</groupId>
            <artifactId>module-java-native</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>de.yard.tcp-22</groupId>
            <artifactId>module-engine</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>de.yard.tcp-22</groupId>
            <artifactId>module-maze</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>de.yard.tcp-22</groupId>
            <artifactId>module-traffic</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <!--homebrew for running the scene-->
        <dependency>
            <groupId>de.yard.tcp-22</groupId>
            <artifactId>module-platform-homebrew</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <!-- project modules test modules-->
        <dependency>
            <groupId>de.yard.tcp-22</groupId>
            <artifactId>module-core</artifactId>
            <version>1.0.0-SNAPSHOT</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>de.yard.tcp-22</groupId>
            <artifactId>module-engine</artifactId>
            <version>1.0.0-SNAPSHOT</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>de.yard.tcp-22</groupId>
            <artifactId>module-maze</artifactId>
            <version>1.0.0-SNAPSHOT</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <build>
        <!--28.2.23 not needed? <resources>
           <resource>
               <directory>src/main/java</directory>
               <includes>
                   <include>**/*.java</include>
               </includes>
           </resource>
       </resources>-->

        <plugins>
            <!-- "surefire", "source" and "jar"(for tests.jar) come from parent-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <mainClass>de.yard.threed.sceneserver.Main</mainClass>
                </configuration>
            </plugin>
            <!-- Collect all runtime dependendencies to a 'lib' folder-->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${libdir}</outputDirectory>
                            <!--not needed? <excludeScope>test</excludeScope>-->
                        </configuration>
                    </execution>
                    <!-- also copy build artifact to lib-->
                    <execution>
                        <id>copy-installed</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <type>${project.packaging}</type>
                                </artifactItem>
                            </artifactItems>
                            <outputDirectory>${libdir}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- and copy resources to lib-->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.7</version>
                <executions>
                    <execution>
                        <id>copy-resources01</id>
                        <phase>install</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/main/resources</directory>
                                    <includes>
                                        <include>**/*</include>
                                    </includes>
                                </resource>
                            </resources>
                            <encoding>UTF-8</encoding>
                            <outputDirectory>${libdir}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>

